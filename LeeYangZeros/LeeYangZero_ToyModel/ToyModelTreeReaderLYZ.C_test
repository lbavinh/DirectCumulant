#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include "TProfile.h"
#include "TMath.h"
#include "TH1.h"
#include <TLegend.h>
#include <iostream>

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include <TComplex.h>
#include <TString.h>

using std::cout;
using std::endl;
using std::cerr;
#define sqr(x) ((x)*(x))
double CentB(double bimp)
{
  // Hard coded centrality defenition
  // based on the impact parameter
  double fcent;
  if (bimp < 2.91)
    fcent = 2.5; // 0-5%
  else if (bimp < 4.18)
    fcent = 7.5; // 5-10%
  else if (bimp < 6.01)
    fcent = 15.; // 10-20%
  else if (bimp < 7.37)
    fcent = 25.; // 20-30%
  else if (bimp < 8.52)
    fcent = 35.; // 30-40%
  else if (bimp < 9.57)
    fcent = 45.; // 40-50%
  else if (bimp < 10.55)
    fcent = 55.; // 50-60%
  else if (bimp < 11.46)
    fcent = 65.; // 60-70%
  else if (bimp < 12.31)
    fcent = 75.; // 70-80%
  else
    fcent = -1;
  return fcent;
}

int GetCentBin(double cent)
{
  if (cent == -1)
    return -1;
  if (cent == 2.5)
    return 0;
  if (cent == 7.5)
    return 1;
  if (cent == 15.)
    return 2;
  if (cent == 25.)
    return 3;
  if (cent == 35.)
    return 4;
  if (cent == 45.)
    return 5;
  if (cent == 55.)
    return 6;
  if (cent == 65.)
    return 7;
  if (cent == 75.)
    return 8;
  return -1;
}

void GetRes(TProfile *const &pr)
{
  cout << "const double res2[" << pr->GetNbinsX() <<"] = {";
  for (int i=0; i<pr->GetNbinsX()-1; i++)
  {
    cout << TMath::Sqrt(pr->GetBinContent(i+1)) <<", ";
  }
  cout << TMath::Sqrt(pr->GetBinContent(pr->GetNbinsX())) <<"};" << endl;
}

void GetMultMean(TProfile *const &pr)
{
  cout << "const double dMultMean[" << pr->GetNbinsX() <<"] = {";
  for (int i=0; i<pr->GetNbinsX()-1; i++)
  {
    cout << (pr->GetBinContent(i+1)) <<", ";
  }
  cout <<(pr->GetBinContent(pr->GetNbinsX()))<<"};" << endl;
}

double GetR0(TH1F *const &hist)
{
  //find the first minimum of the square of the modulus of Gtheta 

  int iNbins = hist->GetNbinsX();
  double dR0 = 0.; 

  for (int b=2;b<iNbins;b++)
  {
    double dG0 = hist->GetBinContent(b);
    double dGnext = hist->GetBinContent(b+1);
    double dGnextnext = hist->GetBinContent(b+2);
    // cout << hist->GetBinCenter(b);
    if (dGnext > dG0 && dGnextnext > dG0 && dG0<1.)
    {
      double dGlast = hist->GetBinContent(b-1);
      double dXlast = hist->GetBinCenter(b-1);
      double dX0 = hist->GetBinCenter(b);
      double dXnext = hist->GetBinCenter(b+1);

      dR0 = dX0 - ((dX0-dXlast)*(dX0-dXlast)*(dG0-dGnext) - (dX0-dXnext)*(dX0-dXnext)*(dG0-dGlast))/
        (2.*((dX0-dXlast)*(dG0-dGnext) - (dX0-dXnext)*(dG0-dGlast))); //parabolic interpolated minimum
      break; //stop loop if minimum is found
    } //if

  }//b

      
  return dR0;
}

TH1F* FillHistGtheta(TProfile *const &prReGtheta, TProfile *const &prImGtheta)
{
  Int_t iNbins = prReGtheta->GetNbinsX();
  Double_t xMin = prReGtheta->GetXaxis()->GetBinLowEdge(1);
  Double_t xMax = prReGtheta->GetXaxis()->GetBinLowEdge(iNbins) + prReGtheta->GetXaxis()->GetBinWidth(iNbins);
  TH1F* hGtheta = new TH1F(Form("hist_%s",prReGtheta->GetName()),"",iNbins,xMin,xMax);
  for (int rbin = 0; rbin < iNbins; rbin++)
  {
    // get bincentre of bins in histogram
    Double_t dRe = prReGtheta->GetBinContent(rbin+1);
    Double_t dIm = prImGtheta->GetBinContent(rbin+1);
    TComplex cGtheta(dRe,dIm);
    //fill fHistGtheta with the modulus squared of cGtheta
    //to avoid errors when using a merged outputfile use SetBinContent() and not Fill()
    if (cGtheta.Rho2()>3.) hGtheta->SetBinContent(rbin+1,0);
    else hGtheta->SetBinContent(rbin+1,cGtheta.Rho2());
    // hGtheta->SetBinContent(rbin+1,cGtheta.Rho2());
    hGtheta->SetBinError(rbin+1,0.0);
  }
  return hGtheta;
}

double BesselJ0(double x)
{
  double temp=1., xn=1.;
  long n, Nmax;

  Nmax=int(floor(2.*x)+4);
  for (n=1;n<Nmax;n++)
  {
    xn*=(-sqr(x/2./((float) n)));
    temp+=xn;
  }
  return temp;
}

void ToyModelTreeReaderLYZ(TString file = "ToyModel.root", TString outFile = "test.root", Bool_t bFirstRun = 1)
{
  
  const int ncent = 9; // 0-80%
  const double bin_cent[ncent + 1] = {0, 5, 10, 20, 30, 40, 50, 60, 70, 80};
  const int npt = 12; // 0.2 - 3.5 GeV/c
  const double bin_pT[npt + 1] = {0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.2, 2.6, 3.0, 3.5};
  const double maxpt = 3.5; // max pt
  const double minpt = 0.2; // min pt
  const double eta_cut = 2.0;
  const double eta_gap = 0;

  const int neta = 2; // [eta-,eta+]
  const int max_nh = 20000;

  // LYZ
  bool bUseProduct = 0;
  const int rbins = 2500;
  const double rMax = 0.5;
  const double rMin = 0.005;
  const double rMaxSum = rMax;
  const double rMinSum = rMin;
  // const double rMaxSum = 230;
  // const double rMinSum = 0;
  const int thetabins = 5;
  const double rootJ0 = 2.4048256;
  const double J1rootJ0 = 0.519147;
  double theta[thetabins];
  double multPOI[npt];
  for (int thetabin = 0; thetabin < thetabins; ++thetabin)
  {
    theta[thetabin] = thetabin * TMath::Pi() / (2.0 * thetabins);
  }
  double Qtheta[thetabins];
  TComplex genfunS[rbins][thetabins]; // sum
  TComplex genfunP[rbins][thetabins]; // product
  TComplex genfunPr0[thetabins]; // product
  TComplex cdGr0[thetabins];
  TComplex cExpo;
  double Q2x, Q2y;
  int mult;
  
  // Differential LYZ
  TComplex cDenominator;
  TComplex cExponent[thetabins];

  // from 1-st run
  // <M>=1000
  const double res2[9] = {0.578437, 0.718362, 0.811036, 0.851391, 0.84943, 0.814827, 0.739581, 0.625978, 0.484355};
  const double r02[ncent][thetabins] = {{0.0395415, 0.039422, 0.0395461, 0.039205, 0.0397545 },
  {0.0316243, 0.0316585, 0.0314996, 0.0315935, 0.0315527 },
  {0.0289243, 0.0289726, 0.0290406, 0.029086, 0.0290144 },
  {0.0309938, 0.0311135, 0.031145, 0.0309388, 0.0309227 },
  {0.0382666, 0.0381948, 0.0380794, 0.0380945, 0.0381503 },
  {0.0532608, 0.0530296, 0.0528141, 0.0529654, 0.0531268 },
  {0.0844554, 0.084631, 0.0843408, 0.0851151, 0.0845861 },
  {0.167994, 0.170527, 0.172763, 0.173792, 0.169574 },
  {0, 0.464946, 0, 0, 0.420858 },
  };

  const double r02Pro[ncent][thetabins] = {{0.0395415, 0.039422, 0.0395461, 0.039205, 0.0397545 },
  {0.0316243, 0.0316585, 0.0314996, 0.0315935, 0.0315527 },
  {0.0289243, 0.0289726, 0.0290406, 0.029086, 0.0290144 },
  {0.0309938, 0.0311135, 0.031145, 0.0309388, 0.0309227 },
  {0.0382666, 0.0381948, 0.0380794, 0.0380945, 0.0381503 },
  {0.0532608, 0.0530296, 0.0528141, 0.0529654, 0.0531268 },
  {0.0844554, 0.084631, 0.0843408, 0.0851151, 0.0845861 },
  {0.167994, 0.170527, 0.172763, 0.173792, 0.169574 },
  {0, 0.464946, 0, 0, 0.420858 },
  };

  const double chisq[9] = {0.974493, 1.33634, 1.6448, 1.80669, 1.7188, 1.47705, 1.12974, 0.698748, 0.381532};





  TFile *d_outfile = new TFile(outFile.Data(), "recreate");

  TH1I *hMult = new TH1I("hMult", "Multiplicity distr;M;dN/dM", max_nh, 0, max_nh);
  TH2F *hBimpvsMult = new TH2F("hBimpvsMult", "Impact parameter vs multiplicity;N_{ch};b (fm)", max_nh, 0, max_nh, 200, 0., 20.);
  TH1F *hBimp = new TH1F("hBimp", "Impact parameter;b (fm);dN/db", 200, 0., 20.);
  TH1F *hPt = new TH1F("hPt", "Pt-distr;p_{T} (GeV/c); dN/dP_{T}", 500, 0., 6.);
  TH1F *hRP = new TH1F("hRP", "Event Plane; #phi-#Psi_{RP}; dN/d#Psi_{RP}", 300, 0., 7.);
  TH1F *hPhi = new TH1F("hPhi", "Particle azimuthal angle distr with respect to RP; #phi-#Psi_{RP}; dN/d(#phi-#Psi_{RP})", 300, 0., 7.);
  TH1F *hPhil = new TH1F("hPhil", "Azimuthal angle distr in laboratory coordinate system; #phi; dN/d#phi", 300, 0., 7.);
  TH1F *hEta = new TH1F("hEta", "Pseudorapidity distr; #eta; dN/d#eta", 300, -2.2, 2.2);

  TProfile *hv2MC = new TProfile("hv2MC", "MC flow", ncent, &bin_cent[0]);
  TProfile *hv2EP = new TProfile("hv2EP", "Ref. v_{2}{EP}", ncent, &bin_cent[0]);
  TProfile *HRes = new TProfile("HRes", "EP resolution", ncent, &bin_cent[0]);

  TProfile *hv2MCpt[ncent];
  TProfile *hv2EPpt[ncent];

  for (int icent = 0; icent < ncent; icent++)
  { // loop over centrality classes
    hv2EPpt[icent] = new TProfile(Form("hv2EPpt_%i", icent), "", npt, &bin_pT[0]);
    hv2MCpt[icent] = new TProfile(Form("hv2MCpt_%i", icent), "", npt, &bin_pT[0]);
  } // end of loop over centrality classes

  TProfile *prReGthetaSum[ncent][thetabins];
  TProfile *prImGthetaSum[ncent][thetabins];
  TH1F *hGthetaSum[ncent][thetabins];

  TProfile *prReGthetaProduct[ncent][thetabins];
  TProfile *prImGthetaProduct[ncent][thetabins];
  TH1F *hGthetaProduct[ncent][thetabins];


  TProfile *prRefMult = new TProfile("prRefMult","",ncent, &bin_cent[0]);
  TProfile *prQ2x = new TProfile("prQ2x","",ncent, &bin_cent[0]);
  TProfile *prQ2y = new TProfile("prQ2y","",ncent, &bin_cent[0]);
  TProfile *prQ2ModSq = new TProfile("prQ2ModSq","",ncent, &bin_cent[0]);

  // Differential flow
  TProfile *prReDenom[thetabins];
  TProfile *prImDenom[thetabins];
  TProfile *prReNumer[thetabins][ncent];
  TProfile *prImNumer[thetabins][ncent];

  TProfile *prReDenomPro[thetabins];
  TProfile *prImDenomPro[thetabins];
  TProfile *prReNumerPro[thetabins][ncent];
  TProfile *prImNumerPro[thetabins][ncent];

  TProfile *prMultPOI[ncent];
  if (bFirstRun){
  for (int i = 0; i < ncent; ++i)
  {
    for (int j = 0; j < thetabins; ++j)
    {
      prReGthetaSum[i][j] = new TProfile(Form("prReGthetaSum_mult%d_theta%d", i, j), "", rbins, rMinSum, rMaxSum);
      prImGthetaSum[i][j] = new TProfile(Form("prImGthetaSum_mult%d_theta%d", i, j), "", rbins, rMinSum, rMaxSum);
      hGthetaSum[i][j] = new TH1F(Form("hGthetaSum_mult%d_theta%d", i, j), "", rbins, rMinSum, rMaxSum);
      if (bUseProduct)
      {
        prReGthetaProduct[i][j] = new TProfile(Form("prReGthetaProduct_mult%d_theta%d", i, j), "", rbins, rMin, rMax);
        prImGthetaProduct[i][j] = new TProfile(Form("prImGthetaProduct_mult%d_theta%d", i, j), "", rbins, rMin, rMax);
        hGthetaProduct[i][j] = new TH1F(Form("hGthetaProduct_mult%d_theta%d", i, j), "", rbins, rMin, rMax);
      }
    }
  }}

  else{
  for (int i = 0; i < thetabins; i++)
  {
    prReDenom[i] = new TProfile(Form("prReDenom_theta%i",i),"", ncent, &bin_cent[0]);
    prImDenom[i] = new TProfile(Form("prImDenom_theta%i",i),"", ncent, &bin_cent[0]);

    for (int j = 0; j < ncent; j++)
    {
      prReNumer[i][j] = new TProfile(Form("prReNumer_theta%i_cent%i", i, j),"", npt, &bin_pT[0]);
      prImNumer[i][j] = new TProfile(Form("prImNumer_theta%i_cent%i", i, j),"", npt, &bin_pT[0]);
    }
    if (bUseProduct){
    prReDenomPro[i] = new TProfile(Form("prReDenomPro_theta%i",i),"", ncent, &bin_cent[0]);
    prImDenomPro[i] = new TProfile(Form("prImDenomPro_theta%i",i),"", ncent, &bin_cent[0]);

    for (int j = 0; j < ncent; j++)
    {
      prReNumerPro[i][j] = new TProfile(Form("prReNumerPro_theta%i_cent%i", i, j),"", npt, &bin_pT[0]);
      prImNumerPro[i][j] = new TProfile(Form("prImNumerPro_theta%i_cent%i", i, j),"", npt, &bin_pT[0]);
    }
    }

  }

  for (int ic = 0; ic < ncent; ic++)
  {
    prMultPOI[ic] = new TProfile(Form("prMultPOI_cent%i",ic),"", npt, 0, npt);
  }}
  double r[rbins], rSum[rbins];
  if (bFirstRun){
  for (int rbin = 0; rbin < rbins; ++rbin)
  {
    if (bUseProduct) {
      r[rbin] = (double) hGthetaProduct[0][0]->GetBinCenter(rbin+1);
      rSum[rbin] = (double) hGthetaSum[0][0]->GetBinCenter(rbin+1);
    }
    else{rSum[rbin] = (double) hGthetaSum[0][0]->GetBinCenter(rbin+1);}
  }}

  // cout << "Histograms have been initialized" << endl;

  // Declaration of leaf types
  Int_t nh;
  Float_t b;
  Float_t rp;
  Float_t phi0[max_nh]; //[nh]
  Bool_t bFlow[max_nh]; //[nh]
  Float_t eta[max_nh];  //[nh]
  Float_t pt[max_nh];   //[nh]

  // List of branches
  TBranch *b_nh;    //!
  TBranch *b_b;     //!
  TBranch *b_rp;    //!
  TBranch *b_phi0;  //!
  TBranch *b_bFlow; //!
  TBranch *b_eta;   //!
  TBranch *b_pt;    //!

  TChain *fChain = new TChain("tree");
  fChain->Add(file.Data());
  if (!fChain)
    return;
  fChain->SetBranchAddress("nh", &nh, &b_nh);
  fChain->SetBranchAddress("b", &b, &b_b);
  fChain->SetBranchAddress("rp", &rp, &b_rp);
  fChain->SetBranchAddress("phi0", phi0, &b_phi0);
  fChain->SetBranchAddress("bFlow", bFlow, &b_bFlow);
  fChain->SetBranchAddress("eta", eta, &b_eta);
  fChain->SetBranchAddress("pt", pt, &b_pt);

  if (fChain == 0)
    return;

  Long64_t nentries = fChain->GetEntries();
  cout << "Calculating flow..." << endl;
  for (Long64_t jentry = 0; jentry < nentries; jentry++)
  {
    if (jentry % 10000 == 0)
      cout << jentry << endl;
    // if (jentry == 100000) break;  
    fChain->GetEntry(jentry);

    double dCent = CentB(b);
    if (dCent < 0)
      continue;
    int icent = GetCentBin(dCent);
    mult = 0;
    hMult->Fill(nh);
    hRP->Fill(rp);
    hBimp->Fill(b);
    hBimpvsMult->Fill(nh, b);
    double sumQxy[neta][2] = {{0}}; // [eta-,eta+][x,y]
    double multQv[neta] = {0};      // [eta+,eta-]

    for (int i = 0; i < thetabins; ++i)
    {
      Qtheta[i] = 0.;
      cExponent[i] = TComplex(0.0,0.0);
    }
    Q2x = 0.;
    Q2y = 0.;
    if (bFirstRun)
    {
      for (int i = 0; i < rbins; ++i)
      {
        for (int j = 0; j < thetabins; ++j)
        {
          genfunS[i][j] = TComplex(0.0, 0.0); // initialize to 0, calculate directly
          if (bUseProduct) genfunP[i][j] = TComplex::One(); // initialize to 1, calcualte via product
        }
      }
    }
    else{
      
      for (int it = 0; it < thetabins; it++){
        genfunPr0[it] = TComplex::One();
        cdGr0[it] = TComplex(0.0,0.0);
      }
      for (int ipt = 0; ipt < npt; ipt++) multPOI[ipt] = 0.;
    } 
    for (int i = 0; i < nh; i++)
    { // track loop
      double pT = pt[i];
      if (pT < minpt || pT > maxpt || eta[i] > eta_cut)
        continue;
      hPt->Fill(pT);
      double phi = phi0[i];
      if (phi < 0)
        phi += 2. * TMath::Pi();
      hPhi->Fill(phi-rp);
      hPhil->Fill(phi);
      hEta->Fill(eta[i]);

      Q2x += TMath::Cos(2.0 * phi);
      Q2y += TMath::Sin(2.0 * phi);

      if (!bFirstRun)
      {
        Int_t ipt = -1;
        for (int j = 0; j < npt; j++) if (pT >= bin_pT[j] && pT < bin_pT[j + 1]) ipt = j;
        multPOI[ipt]++;
      }
      Double_t v2 = TMath::Cos(2 * (phi - rp));

      
      if (bFlow[i])
      {
        hv2MC->Fill(dCent, v2);        // calculate reference v2 from MC toy
        hv2MCpt[icent]->Fill(pT, v2); // Calculate differential v2 from MC toy
      }
      // Sub eta event method
      int fEta = -1;
      if (eta[i] < -eta_gap && eta[i] > -eta_cut)
        fEta = 0;
      if (eta[i] > eta_gap && eta[i] < eta_cut)
        fEta = 1;

      if (fEta > -1)
      {
        sumQxy[fEta][0] += pT * TMath::Cos(2.0 * phi);
        sumQxy[fEta][1] += pT * TMath::Sin(2.0 * phi);
        multQv[fEta]++;
      } // end of eta selection
      if (bUseProduct){
        if (bFirstRun){
          for (int thetabin = 0; thetabin < thetabins; ++thetabin)
          {
            double dCosTerm = TMath::Cos(2. * (phi - theta[thetabin]));
            for (int rbin = 0; rbin < rbins; ++rbin)
            {
              genfunP[rbin][thetabin] *= TComplex(1.0, r[rbin] * dCosTerm);
            }
          }
        }
        else{
          for (int thetabin = 0; thetabin < thetabins; ++thetabin)
          {
            double dCosTerm = TMath::Cos(2. * (phi - theta[thetabin]));
            genfunPr0[thetabin] *= TComplex(1.0, r02Pro[icent][thetabin] * dCosTerm);
            TComplex cCosTermComplex(1., r02Pro[icent][thetabin] * dCosTerm);
            cdGr0[thetabin] += (dCosTerm/cCosTermComplex); 
          }
        }
      }
      mult++;
    } // end of track loop
    if (mult != 0) 
    {
      hMult->Fill(mult);
      if (bFirstRun) {prRefMult->Fill(dCent, mult);}
      else{
        for (int ipt = 0; ipt < npt; ipt++) 
        {prMultPOI[icent]->Fill(ipt+0.5,multPOI[ipt]);}
      }

      double Q2xmean = Q2x / mult;
      double Q2ymean = Q2y / mult;
      for (int thetabin = 0; thetabin < thetabins; ++thetabin)
      {
        Qtheta[thetabin] = Q2x * TMath::Cos(2.0 * theta[thetabin]) + Q2y * TMath::Sin(2.0 * theta[thetabin]);
        // Qtheta[thetabin] = Q2xmean * TMath::Cos(2.0 * theta[thetabin]) + Q2ymean * TMath::Sin(2.0 * theta[thetabin]);
      }

      if (bFirstRun)
      {
        prQ2x->Fill(dCent, Q2x);
        prQ2y->Fill(dCent, Q2y);
        prQ2ModSq->Fill(dCent, Q2x*Q2x+Q2y*Q2y);

        for (int rbin = 0; rbin < rbins; rbin++)
        {
          for (int thetabin = 0; thetabin < thetabins; thetabin++)
          {
            cExpo = TComplex(0., rSum[rbin] * Qtheta[thetabin]);
            genfunS[rbin][thetabin] = TComplex::Exp(cExpo); // generating function from Q-vectors
            prReGthetaSum[icent][thetabin]->Fill(rSum[rbin], genfunS[rbin][thetabin].Re());
            prImGthetaSum[icent][thetabin]->Fill(rSum[rbin], genfunS[rbin][thetabin].Im());
            if (bUseProduct)
            {
              prReGthetaProduct[icent][thetabin]->Fill(r[rbin], genfunP[rbin][thetabin].Re());
              prImGthetaProduct[icent][thetabin]->Fill(r[rbin], genfunP[rbin][thetabin].Im());
            }
          }
        }
      }
      else
      {
        // Differential LYZ
        for (int thetabin = 0; thetabin < thetabins; thetabin++)
        {
          cExponent[thetabin] = TComplex(0., r02[icent][thetabin] * Qtheta[thetabin]);
          cDenominator = Qtheta[thetabin]*(TComplex::Exp(cExponent[thetabin])); // BP eq 12
          prReDenom[thetabin]->Fill(dCent, cDenominator.Re());
          prImDenom[thetabin]->Fill(dCent, cDenominator.Im());
        }
        if (bUseProduct)
        {
          for (int thetabin = 0; thetabin < thetabins; thetabin++)
          {
            prReDenomPro[thetabin]->Fill(dCent, (genfunPr0[thetabin] * cdGr0[thetabin]).Re());
            prImDenomPro[thetabin]->Fill(dCent, (genfunPr0[thetabin] * cdGr0[thetabin]).Im());
          }
        }
      }
    } // end of if (mult!=0)

    // Eta sub-event method
    double fEP[2] = {0.}; // [eta-,eta+]
    for (int ieta = 0; ieta < neta; ieta++)
    {
      if (multQv[ieta] > 5)
      { // multiplicity > 5
        fEP[ieta] = TMath::ATan2(sumQxy[ieta][1], sumQxy[ieta][0]) / 2.0;
        fEP[ieta] = TMath::ATan2(sin(2.0 * fEP[ieta]), cos(2.0 * fEP[ieta])); // what for?
        fEP[ieta] /= 2.0;
      }
      else
      {
        fEP[ieta] = -9999.;
      }
    }
    if (fEP[0] != -9999. && fEP[1] != -9999.)
    {
      HRes->Fill(dCent, TMath::Cos(2.0 * (fEP[0] - fEP[1])));
    }
    // Estimate the event plane resolution of 2nd harmonic by the correlation between the azimuthal
    // angles of two subset groups of tracks, called sub-events \eta- and \eta+

    if (!bFirstRun){
    for (int itrk = 0; itrk < nh; itrk++)
    { //track loop
      double pT = pt[itrk];
      if (pT < minpt || pT > maxpt || eta[itrk] > eta_cut)
        continue;
      double phi = phi0[itrk];
  
      if (fEP[0] != -9999. && fEP[1] != -9999.)
      {
        float v2 = -999.0;
        if (eta[itrk] > 0)
        { // eta+
          v2 = TMath::Cos(2.0 * (phi - fEP[0])) / res2[icent];
        }
        if (eta[itrk] < 0)
        { // eta-
          v2 = TMath::Cos(2.0 * (phi - fEP[1])) / res2[icent];
        }
        // if(fabs(eta[itrk])<1.0){ // eliminate spectators
        if (v2 != 999.0)
        {
          hv2EPpt[icent]->Fill(pT, v2);
          hv2EP->Fill(dCent, v2);
        }
      }
    
      for (int thetabin = 0; thetabin < thetabins; ++thetabin)
      {
        double dCosTerm = TMath::Cos(2.0 * (phi - theta[thetabin]));
        TComplex cNumeratorPOI = dCosTerm * (TComplex::Exp(cExponent[thetabin]));    
        prReNumer[thetabin][icent]->Fill(pT, cNumeratorPOI.Re());
        prImNumer[thetabin][icent]->Fill(pT, cNumeratorPOI.Im());
        if (bUseProduct){
          TComplex cCosTermComplex(1., r02Pro[icent][thetabin] * dCosTerm);
          TComplex cNumeratorPOIPro = genfunPr0[thetabin] * dCosTerm / cCosTermComplex;   
          prReNumerPro[thetabin][icent]->Fill(pT, cNumeratorPOIPro.Re());
          prImNumerPro[thetabin][icent]->Fill(pT, cNumeratorPOIPro.Im());          
        }
      }
    } // end of the track loop
    }
  }   // end of event loop



  //============================================================================================================
  cout << file << " file processed" << endl;
  if (bFirstRun){
    cout << "Resolution:" << endl;
    GetRes(HRes);
    GetMultMean(prRefMult);
    double dChi2[ncent];
    float v2int[ncent]={0.}, v2e[ncent]={0.};
    double dVtheta[ncent][thetabins] = {0.};
    
    //============================================================================================================
    cout << "const double r02[ncent][thetabins] = {";
    for (int ic = 0; ic < ncent; ic++)
    {
      float refmult = prRefMult->GetBinContent(ic+1);
      int thetacount = 0;
      cout <<"{";
      for (int it = 0; it < thetabins; it++)
      {
        TH1F *hGtheta = FillHistGtheta(prReGthetaSum[ic][it], prImGthetaSum[ic][it]);
        float r0theta = GetR0(hGtheta);
        cout << r0theta << ", ";
        if (r0theta!=0) 
        {
          v2int[ic] += rootJ0 / r0theta;
          dVtheta[ic][it] = rootJ0 / r0theta;
          thetacount++;
        }
      }
      cout << "}," << endl;
      if (thetacount!=0) v2int[ic] /= (float)thetacount*refmult;
      // if (thetacount!=0) v2int[ic] /= (float)thetacount;
      else {v2int[ic]=0.;}
      
      // cout << v2int[ic] << " ";
      float modQ2sqmean = prQ2ModSq->GetBinContent(ic+1);
      float Q2xmean = prQ2x->GetBinContent(ic+1);
      float Q2ymean = prQ2y->GetBinContent(ic+1);
      float chi2 = v2int[ic]*refmult/sqrt(modQ2sqmean-Q2xmean*Q2xmean-Q2ymean*Q2ymean-pow(v2int[ic]*refmult,2));
      // float chi2 = v2int[ic]/sqrt(modQ2sqmean-Q2xmean*Q2xmean-Q2ymean*Q2ymean-pow(v2int[ic],2));
      dChi2[ic] = chi2;

      float temp=0.;
      for(int it=0; it<thetabins; it++) 
      {    

        double arg = theta[it];
        temp+=exp(sqr(rootJ0/chi2)*cos(arg)/2.)*
          BesselJ0(2.*rootJ0*sin(arg/2.))+
          exp(-sqr(rootJ0/chi2)*cos(arg)/2.)*
          BesselJ0(2.*rootJ0*cos(arg/2.));
      }
      float neve = prRefMult->GetBinEntries(ic+1);
      float err2mean = v2int[ic]*sqrt(temp/2./neve/thetabins)/rootJ0/J1rootJ0;
      v2e[ic] = err2mean;
    } // end of V2RP calculation
    
    cout << " };" << endl;
    //============================================================================================================
    if (bUseProduct){
    cout << "const double r02Pro[ncent][thetabins] = {";
    for (int ic = 0; ic < ncent; ic++)
    {
      float refmult = prRefMult->GetBinContent(ic+1);
      int thetacount = 0;
      cout <<"{";
      for (int it = 0; it < thetabins; it++)
      {
        TH1F *hGtheta = FillHistGtheta(prReGthetaProduct[ic][it], prImGthetaProduct[ic][it]);
        float r0theta = GetR0(hGtheta);
        cout << r0theta << ", ";
        if (r0theta!=0) 
        {
          v2int[ic] += rootJ0 / r0theta;
          dVtheta[ic][it] = rootJ0 / r0theta;
          thetacount++;
        }
      }
      cout << "}," << endl;
    } // end of V2RP calculation
    cout << " };" << endl;      
    }
    //============================================================================================================
    cout << "const double chisq[" << ncent << "] = {";
    for (int ic = 0; ic < ncent-1; ic++)
    {
      cout << dChi2[ic] <<", ";
    }
    cout << dChi2[ncent-1] << "};" << endl;

    cout << "My flow" << endl;
    cout << "double v2MC[9] = {";
    for (int ic = 0 ; ic < ncent-1; ic++)
    {
      cout << hv2MC->GetBinContent(ic+1) << ", ";
    }
    cout << hv2MC->GetBinContent(ncent) << "};" << endl;

    cout << "double v2LYZ[9] = {";
    for (int ic = 0 ; ic < ncent-1; ic++)
    {
      cout << v2int[ic] << ", ";
    }
    cout << v2int[ncent-1] << "};" << endl;
    cout << "double v2eLYZ[9] = {";
    for (int ic = 0 ; ic < ncent-1; ic++)
    {
      cout << v2e[ic] << ", ";
    }
    cout << v2e[ncent-1] << "};" << endl;

  }

  d_outfile->cd();
  if (bFirstRun)
  {
    hMult->Write();
    hBimp->Write();
    hPt->Write();
    hPhi->Write();
    hEta->Write();
    hv2MC->Write();
    HRes->Write();
    prRefMult->Write();
    prQ2x->Write();
    prQ2y->Write();
    prQ2ModSq->Write();
    for (int i = 0; i < ncent; ++i)
    {
      for (int j = 0; j < thetabins; ++j)
      {
        prReGthetaSum[i][j]->Write();
        prImGthetaSum[i][j]->Write();
        if (bUseProduct)
        {
          prReGthetaProduct[i][j]->Write();
          prImGthetaProduct[i][j]->Write();
        }
      }
    }
  }
  else
  {
    hv2EP->Write();
    for (int j = 0; j < thetabins; ++j)
    {
      prReDenom[j]->Write();
      prImDenom[j]->Write();
      for (int i = 0; i < ncent; i++)
      {
        prReNumer[j][i]->Write();
        prImNumer[j][i]->Write();
      }
      if (bUseProduct){
        prReDenomPro[j]->Write();
        prImDenomPro[j]->Write();
        for (int i = 0; i < ncent; i++)
        {
          prReNumerPro[j][i]->Write();
          prImNumerPro[j][i]->Write();
        }
      }
    }
    for (int ic = 0; ic < ncent; ic++)
    {
      prMultPOI[ic]->Write();
      hv2EPpt[ic]->Write();
      hv2MCpt[ic]->Write();
    }
  }
  d_outfile->Close();
  cout << "Histfile has been written" << endl;
}

