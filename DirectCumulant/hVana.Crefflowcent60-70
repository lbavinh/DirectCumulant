#define hVana_cxx
#include "hVana.h"
#include "function.C"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include "TProfile.h"
#include "TMath.h"
#include "TH1.h"
#include "TString.h"
#include "TVectorD.h"

#include <iostream>
#include <fstream>
using namespace std;

static const int ncent = 8; // 0-80%
static const int bin_cent[ncent] = {5,15,25,35,45,55,65,75};

static const Float_t maxpt = 3.5; // max pt
static const Float_t minpt = 0.2; // min pt
static const int npt = 24; // 0.2 - 3.5 GeV/c 
static const double bin_pT[25]={0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,
                                1.2,1.3,1.4,1.5,1.6,1.7,1.8,2.0,2.2,2.4,
                                2.6,2.8,3.0,3.2,3.5};

TFile *d_outfile;      // out file with histograms and profiles

TH1F *hRP; // reaction plane distribution
TH1F *hPt; // transverse momentum distribution
TH1F *hPhi; // distribution of particle azimuthal angle with respect to RP 
TH1F *hPhil; // distribution of particle azimuthal angle in the laboratory coordinate system
TH1F *hEta; // pseudorapidity
TH1F *hBimp;// impact parameter
TH1I *hMult; // emitted multiplicity 
TH2F *hBimpvsMult; // 2-D histogram impact parameter (y) vs mult (x)


TProfile *hv2MC;       // profile for MC integrated v2
TProfile *hv22;        // profile <<2>> from 2nd Q-Cumulants
TProfile *hv24;        // profile <<4>> from 4th Q-Cumulants

// TProfile for covariance calculation according to (C.12)
// Bilandzic, A. (2012). Anisotropic flow measurements in ALICE at the large hadron collider. 
// Appendix C
TProfile *hcov24;       // <2>*<4>

void hVana::Booking(TString outFile){
   char name[800];
   char title[800];
   d_outfile = new TFile(outFile.Data(),"recreate");
   cout << outFile.Data() << " has been initialized" << endl;

   hMult = new TH1I("hMult", "Multiplicity", 2500, 0, 2500);
   hBimpvsMult = new TH2F("hBimpvsMult", "Impact parameter vs multiplicity;N_{ch};b (fm)", 1500, 0, 1500, 200, 0., 20.);
   hBimp = new TH1F("hBimp","Impact parameter;b (fm);dN/db",200, 0., 20.);
   hPt   = new TH1F("hPt","Pt-distribution;p_{T} (GeV/c); dN/dP_{T}",500,0.,6.);
   hRP   = new TH1F("hRP","Event Plane; #phi-#Psi_{RP}; dN/d#Psi_{RP}",300,0.,7.);
   hPhi  = new TH1F("hPhi","Particle azimuthal angle distribution with respect to RP; #phi-#Psi_{RP}; dN/d(#phi-#Psi_{RP})",300,0.,7.);
   hPhil = new TH1F("hPhil","Azimuthal angle distribution in laboratory coordinate system; #phi; dN/d#phi",300,0.,7.);
   hEta  = new TH1F("hEta","Pseudorapidity distribution; #eta; dN/d#eta",300,-2.2,2.2);

   // for (int icent=0; icent<ncent; icent++){
   //    sprintf(name,"hv2MC_%d",icent);
   //    sprintf(title,"v_{2}(cent), cent=%d-%d %%",bin_cent[icent]-5,bin_cent[icent]+5);
   //    hv2MC[icent] = new TProfile(name,title,1,0.,1.);
   //    hv2MC[icent]->Sumw2();
   //    sprintf(name,"hv22_%d",icent);
   //    sprintf(title,"v_{2}{2}(cent), cent=%d-%d %%",bin_cent[icent]-5,bin_cent[icent]+5);
   //    hv22[icent] = new TProfile(name,title,1,0.,1.);
   //    hv22[icent]->Sumw2();
   //    sprintf(name,"hv24_%d",icent);
   //    sprintf(title,"v_{2}{4}(cent), cent=%d-%d %%",bin_cent[icent]-5,bin_cent[icent]+5);
   //    hv24[icent] = new TProfile(name,title,1,0.,1.);
   //    hv24[icent]->Sumw2();
   //    sprintf(name,"hcov24_%d",icent);
   //    sprintf(title,"<2>#upoint<4> distribution, cent=%d-%d %%",bin_cent[icent]-5,bin_cent[icent]+5);
   //    hcov24[icent] = new TProfile(name,title,1,0.,1.);
   //    hcov24[icent]->Sumw2();        
   // }

   hv22 = new TProfile("hv22","Reference flow from 2nd QC",1,0.,1.);
   hv22->Sumw2();
   hv24 = new TProfile("hv24","Reference flow from 4th QC",1,0.,1.);
   hv24->Sumw2();
   hv2MC = new TProfile("hv2MC","Reference flow from MC",1,0.,1.);
   hv2MC->Sumw2();
   hcov24 = new TProfile("hcov24","<2>#upoint<4> distribution",1,0.,1.);
   hcov24->Sumw2();

   cout << "Histograms have been initialized" << endl;
}

void hVana::Loop_a_file(TString file){
   TFile *treefile = TFile::Open(file.Data());
   TTree *tree = (TTree*)treefile->Get("htree");
   if(tree == 0) {
      cout << "htree is not found in "<< file << endl;
      treefile->Close();
      return;
   }
   cout << file << " is opened" << endl;
   Init(tree);
   Loop();
   treefile->Close();
   cout << file  <<" file processed"<<endl;
}

void hVana::Ana_end(){

   d_outfile -> cd();
   d_outfile -> Write();
   d_outfile -> Close();
   cout << "Histfile has been written" << endl;
}

void hVana::Loop()
{
   if (fChain == 0) return;

   Long64_t nentries = fChain->GetEntriesFast();

   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      // if (Cut(ientry) < 0) continue;
      Ana_event();
      if (ientry%100000==0) cout << ientry << endl;
   }
}

void hVana::Ana_event(){
   if (CentB(b) == bin_cent[6]){ //CentB(b) == bin_cent[1] || CentB(b) == bin_cent[2] || 
   hMult -> Fill(nh);
   hRP -> Fill(rp);
   hBimp -> Fill(b);
   // int icent=-1;
   // for (int i=0; i<ncent; i++){ // loop over centrality
   //    if (CentB(b) == bin_cent[i]) {icent = i; cout << "true" << endl;}
   // }
   
   // if (icent<0) return;
   // notation as (26) in DOI:10.1103/PhysRevC.83.044913
   // Q-vector of RFP
   Double_t Qx2=0, Qy2=0, Qx4=0, Qy4=0;
   TComplex Q2=0., Q4=0.;

   Double_t M = 0.;
   Double_t w2=0.,w4=0.;
   // <2> & <4>
   Double_t cor22 = 0., cor24 = 0.;
   for(int i=0;i<nh;i++) { // track loop
      hPt -> Fill(pt[i]);
      Double_t v2 = TMath::Cos(2*(phi0[i] - rp));

      hv2MC -> Fill(0.5,v2,1);

      Qx2+=TMath::Cos(2*phi0[i]);
      Qy2+=TMath::Sin(2*phi0[i]);
      Qx4+=TMath::Cos(4*phi0[i]);
      Qy4+=TMath::Sin(4*phi0[i]);
      M++;


   } // end of track loop
   if (M >= 2.){ // <2> definition condition
      Q2 = TComplex(Qx2, Qy2);
      w2 = M*(M-1);                             // w(<2>)
      cor22 = CalCor22(Q2, M, w2);     // <2>
      hv22 -> Fill(0.5,cor22,w2); // <<2>>

   } // end of <2> definition condition

   if (M >= 4.){ // <4> definition condition
      Q4 = TComplex(Qx4, Qy4);                                   
      w4 = M*(M-1)*(M-2)*(M-3);                             // w(<4>)
      cor24 = CalCor24(Q2, Q4, M, w4); // <4>
      hv24 -> Fill(0.5,cor24,w4); // <<4>>

      // TProfile for covariance calculation in statistic error
      hcov24 -> Fill(0.5,cor22*cor24,w2*w4); // <2>*<4>

   } // end of <4> definition condition
   }
}

TComplex hVana::Qstar(TComplex Q){
   TComplex QStar   = TComplex::Conjugate(Q);
   return QStar;
}

Double_t hVana::CalCor22(TComplex Q2, Double_t M, Double_t w2){
   // single-event average 2-particle azimuthal correlation <2>

  Double_t Q2Square = Q2.Rho2();
  // Double_t Rho2() const {return fRe*fRe+fIm*fIm;}
  Double_t coor22   = Q2Square - M;                                          
  
  return coor22/w2;
}

Double_t hVana::CalCor24(TComplex Q2, TComplex Q4, Double_t M, Double_t w4){
   // single-event average 4-particle azimuthal correlation <4>

   TComplex Q2Star   = Qstar(Q2);
   // static TComplex Conjugate(const TComplex &c) {return TComplex(c.Re(),-c.Im());}
   TComplex Q4Star   = Qstar(Q4);
   
   Double_t Q2Square = Q2.Rho2();
   Double_t Q4Square = Q4.Rho2();
   Double_t ReQQQ    = (Q4 * Q2Star * Q2Star).Re();

   Double_t coor24   = (Q2Square*Q2Square + Q4Square - 2*ReQQQ
                        - 4*(M-2)*Q2Square + 2*M*(M-3));

   return coor24/w4;
}

Double_t hVana::CalRedCor22(TComplex Q2, TComplex p2, Double_t M, Double_t mp, 
                     Double_t mq, Double_t wred2){

   // Calculate the average reduced single-event 2-particle correlations                      
   TComplex Q2Star = TComplex::Conjugate(Q2);
   Double_t coor22 = (p2*Q2Star-mq).Re();

   return coor22/wred2;
}

Double_t hVana::CalRedCor24(TComplex Q2, TComplex Q4, TComplex p2, TComplex q2,
                            TComplex q4, Double_t M, Double_t mp, Double_t mq, Double_t wred4){

   // Calculate the average reduced single-event 2-particle correlations                      
   TComplex Q2Star = TComplex::Conjugate(Q2);
   TComplex Q4Star = TComplex::Conjugate(Q4);
   TComplex q2Star = TComplex::Conjugate(q2);
   Double_t Q2Square = Q2.Rho2();
   TComplex coorc = p2*Q2*Q2Star*Q2Star-q4*Q2Star*Q2Star-p2*Q2*Q4Star
                  - 2.0*M*p2*Q2Star-2.0*mq*Q2Square+7.0*q2*Q2Star
                  - Q2*q2Star+q4*Q4Star+2.0*p2*Q2Star
                  + 2.0*mq*M-6.0*mq;
   Double_t coor24 = coorc.Re(); 
   return coor24/wred4;
}

void loop_a_list_of_tree(){
   hVana *ana = new hVana();
   ana->Booking("/mnt/pool/2/lbavinh/DirectCumulant/OUT/v2QC_5mil_v2cent.root");
   
   ifstream ifile("/mnt/pool/2/lbavinh/EventGenerator/OUT/FlowPureEtaBimp/runlist.list");
   char filename[200];
   int nfiles=1;
   while(ifile.getline(filename,200)) {
      cout << nfiles <<" file is processing "<<filename <<endl;
      ana->Loop_a_file(filename);
      nfiles++;
   }
   cout<< "Done. " << nfiles-1 << " files are processed." << endl;
   ana -> Ana_end();
   cout << "Histfile written. Congratz!" << endl;
}

// void loop_a_list_of_tree(){
//    hVana *ana = new hVana();
//    ana->Booking("/mnt/pool/2/lbavinh/DirectCumulant/OUT/v2QC_5mil_v2cent.root");
//    ana->Loop_a_file("/mnt/pool/2/lbavinh/EventGenerator/OUT/FlowPureEtaBimp/v2hadron_1.root");
//    // ifstream ifile("/mnt/pool/2/lbavinh/EventGenerator/OUT/FlowPureEtaBimp/runlist.list");
//    // char filename[200];
//    // int nfiles=1;
//    // while(ifile.getline(filename,200)) {
//    //    cout << nfiles <<" file is processing "<<filename <<endl;
//    //    ana->Loop_a_file(filename);
//    //    nfiles++;
//    // }
//    // cout<< "Done. " << nfiles-1 << " files are processed." << endl;
//    ana -> Ana_end();
//    cout << "Histfile written. Congratz!" << endl;
// }